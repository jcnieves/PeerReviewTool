#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.544
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PRToolsLibrary
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PRTool")]
	public partial class PRToolDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertRelease(Release instance);
    partial void UpdateRelease(Release instance);
    partial void DeleteRelease(Release instance);
    partial void InsertReleasePhaseRef(ReleasePhaseRef instance);
    partial void UpdateReleasePhaseRef(ReleasePhaseRef instance);
    partial void DeleteReleasePhaseRef(ReleasePhaseRef instance);
    partial void InsertReview(Review instance);
    partial void UpdateReview(Review instance);
    partial void DeleteReview(Review instance);
    partial void InsertReviewType(ReviewType instance);
    partial void UpdateReviewType(ReviewType instance);
    partial void DeleteReviewType(ReviewType instance);
    partial void InsertUserProjectRef(UserProjectRef instance);
    partial void UpdateUserProjectRef(UserProjectRef instance);
    partial void DeleteUserProjectRef(UserProjectRef instance);
    partial void InsertUsert(Usert instance);
    partial void UpdateUsert(Usert instance);
    partial void DeleteUsert(Usert instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    partial void InsertUserTypePrivilegeRef(UserTypePrivilegeRef instance);
    partial void UpdateUserTypePrivilegeRef(UserTypePrivilegeRef instance);
    partial void DeleteUserTypePrivilegeRef(UserTypePrivilegeRef instance);
    partial void InsertWorkItem(WorkItem instance);
    partial void UpdateWorkItem(WorkItem instance);
    partial void DeleteWorkItem(WorkItem instance);
    partial void InsertPhase(Phase instance);
    partial void UpdatePhase(Phase instance);
    partial void DeletePhase(Phase instance);
    partial void InsertPrivilege(Privilege instance);
    partial void UpdatePrivilege(Privilege instance);
    partial void DeletePrivilege(Privilege instance);
    #endregion
		
		public PRToolDataContext() : 
				base(global::PRToolsLibrary.Properties.Settings.Default.PRToolConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PRToolDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PRToolDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PRToolDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PRToolDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Release> Releases
		{
			get
			{
				return this.GetTable<Release>();
			}
		}
		
		public System.Data.Linq.Table<ReleasePhaseRef> ReleasePhaseRefs
		{
			get
			{
				return this.GetTable<ReleasePhaseRef>();
			}
		}
		
		public System.Data.Linq.Table<Review> Reviews
		{
			get
			{
				return this.GetTable<Review>();
			}
		}
		
		public System.Data.Linq.Table<ReviewType> ReviewTypes
		{
			get
			{
				return this.GetTable<ReviewType>();
			}
		}
		
		public System.Data.Linq.Table<UserProjectRef> UserProjectRefs
		{
			get
			{
				return this.GetTable<UserProjectRef>();
			}
		}
		
		public System.Data.Linq.Table<Usert> Userts
		{
			get
			{
				return this.GetTable<Usert>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
		
		public System.Data.Linq.Table<UserTypePrivilegeRef> UserTypePrivilegeRefs
		{
			get
			{
				return this.GetTable<UserTypePrivilegeRef>();
			}
		}
		
		public System.Data.Linq.Table<WorkItem> WorkItems
		{
			get
			{
				return this.GetTable<WorkItem>();
			}
		}
		
		public System.Data.Linq.Table<Phase> Phases
		{
			get
			{
				return this.GetTable<Phase>();
			}
		}
		
		public System.Data.Linq.Table<Privilege> Privileges
		{
			get
			{
				return this.GetTable<Privilege>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDProject;
		
		private string _ProjectName;
		
		private System.DateTime _UpdateTimeStamp;
		
		private bool _ActiveFlag;
		
		private EntitySet<Release> _Releases;
		
		private EntitySet<UserProjectRef> _UserProjectRefs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDProjectChanging(int value);
    partial void OnIDProjectChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnUpdateTimeStampChanging(System.DateTime value);
    partial void OnUpdateTimeStampChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    #endregion
		
		public Project()
		{
			this._Releases = new EntitySet<Release>(new Action<Release>(this.attach_Releases), new Action<Release>(this.detach_Releases));
			this._UserProjectRefs = new EntitySet<UserProjectRef>(new Action<UserProjectRef>(this.attach_UserProjectRefs), new Action<UserProjectRef>(this.detach_UserProjectRefs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProject", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDProject
		{
			get
			{
				return this._IDProject;
			}
			set
			{
				if ((this._IDProject != value))
				{
					this.OnIDProjectChanging(value);
					this.SendPropertyChanging();
					this._IDProject = value;
					this.SendPropertyChanged("IDProject");
					this.OnIDProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateTimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateTimeStamp
		{
			get
			{
				return this._UpdateTimeStamp;
			}
			set
			{
				if ((this._UpdateTimeStamp != value))
				{
					this.OnUpdateTimeStampChanging(value);
					this.SendPropertyChanging();
					this._UpdateTimeStamp = value;
					this.SendPropertyChanged("UpdateTimeStamp");
					this.OnUpdateTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Release", Storage="_Releases", ThisKey="IDProject", OtherKey="IDProject")]
		public EntitySet<Release> Releases
		{
			get
			{
				return this._Releases;
			}
			set
			{
				this._Releases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_UserProjectRef", Storage="_UserProjectRefs", ThisKey="IDProject", OtherKey="IDProject")]
		public EntitySet<UserProjectRef> UserProjectRefs
		{
			get
			{
				return this._UserProjectRefs;
			}
			set
			{
				this._UserProjectRefs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Releases(Release entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Releases(Release entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_UserProjectRefs(UserProjectRef entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UserProjectRefs(UserProjectRef entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Release")]
	public partial class Release : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDRelease;
		
		private int _IDProject;
		
		private string _VersionR;
		
		private bool _ActiveFlag;
		
		private EntitySet<ReleasePhaseRef> _ReleasePhaseRefs;
		
		private EntitySet<WorkItem> _WorkItems;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDReleaseChanging(int value);
    partial void OnIDReleaseChanged();
    partial void OnIDProjectChanging(int value);
    partial void OnIDProjectChanged();
    partial void OnVersionRChanging(string value);
    partial void OnVersionRChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    #endregion
		
		public Release()
		{
			this._ReleasePhaseRefs = new EntitySet<ReleasePhaseRef>(new Action<ReleasePhaseRef>(this.attach_ReleasePhaseRefs), new Action<ReleasePhaseRef>(this.detach_ReleasePhaseRefs));
			this._WorkItems = new EntitySet<WorkItem>(new Action<WorkItem>(this.attach_WorkItems), new Action<WorkItem>(this.detach_WorkItems));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRelease", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDRelease
		{
			get
			{
				return this._IDRelease;
			}
			set
			{
				if ((this._IDRelease != value))
				{
					this.OnIDReleaseChanging(value);
					this.SendPropertyChanging();
					this._IDRelease = value;
					this.SendPropertyChanged("IDRelease");
					this.OnIDReleaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProject", DbType="Int NOT NULL")]
		public int IDProject
		{
			get
			{
				return this._IDProject;
			}
			set
			{
				if ((this._IDProject != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDProjectChanging(value);
					this.SendPropertyChanging();
					this._IDProject = value;
					this.SendPropertyChanged("IDProject");
					this.OnIDProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VersionR", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string VersionR
		{
			get
			{
				return this._VersionR;
			}
			set
			{
				if ((this._VersionR != value))
				{
					this.OnVersionRChanging(value);
					this.SendPropertyChanging();
					this._VersionR = value;
					this.SendPropertyChanged("VersionR");
					this.OnVersionRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Release_ReleasePhaseRef", Storage="_ReleasePhaseRefs", ThisKey="IDRelease", OtherKey="IDRelease")]
		public EntitySet<ReleasePhaseRef> ReleasePhaseRefs
		{
			get
			{
				return this._ReleasePhaseRefs;
			}
			set
			{
				this._ReleasePhaseRefs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Release_WorkItem", Storage="_WorkItems", ThisKey="IDRelease", OtherKey="IDRelease")]
		public EntitySet<WorkItem> WorkItems
		{
			get
			{
				return this._WorkItems;
			}
			set
			{
				this._WorkItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Release", Storage="_Project", ThisKey="IDProject", OtherKey="IDProject", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Releases.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Releases.Add(this);
						this._IDProject = value.IDProject;
					}
					else
					{
						this._IDProject = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReleasePhaseRefs(ReleasePhaseRef entity)
		{
			this.SendPropertyChanging();
			entity.Release = this;
		}
		
		private void detach_ReleasePhaseRefs(ReleasePhaseRef entity)
		{
			this.SendPropertyChanging();
			entity.Release = null;
		}
		
		private void attach_WorkItems(WorkItem entity)
		{
			this.SendPropertyChanging();
			entity.Release = this;
		}
		
		private void detach_WorkItems(WorkItem entity)
		{
			this.SendPropertyChanging();
			entity.Release = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReleasePhaseRef")]
	public partial class ReleasePhaseRef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDRelease;
		
		private int _IDPhase;
		
		private bool _ActiveFlag;
		
		private EntityRef<Release> _Release;
		
		private EntityRef<Phase> _Phase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDReleaseChanging(int value);
    partial void OnIDReleaseChanged();
    partial void OnIDPhaseChanging(int value);
    partial void OnIDPhaseChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    #endregion
		
		public ReleasePhaseRef()
		{
			this._Release = default(EntityRef<Release>);
			this._Phase = default(EntityRef<Phase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRelease", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDRelease
		{
			get
			{
				return this._IDRelease;
			}
			set
			{
				if ((this._IDRelease != value))
				{
					if (this._Release.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDReleaseChanging(value);
					this.SendPropertyChanging();
					this._IDRelease = value;
					this.SendPropertyChanged("IDRelease");
					this.OnIDReleaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPhase", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDPhase
		{
			get
			{
				return this._IDPhase;
			}
			set
			{
				if ((this._IDPhase != value))
				{
					if (this._Phase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPhaseChanging(value);
					this.SendPropertyChanging();
					this._IDPhase = value;
					this.SendPropertyChanged("IDPhase");
					this.OnIDPhaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Release_ReleasePhaseRef", Storage="_Release", ThisKey="IDRelease", OtherKey="IDRelease", IsForeignKey=true)]
		public Release Release
		{
			get
			{
				return this._Release.Entity;
			}
			set
			{
				Release previousValue = this._Release.Entity;
				if (((previousValue != value) 
							|| (this._Release.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Release.Entity = null;
						previousValue.ReleasePhaseRefs.Remove(this);
					}
					this._Release.Entity = value;
					if ((value != null))
					{
						value.ReleasePhaseRefs.Add(this);
						this._IDRelease = value.IDRelease;
					}
					else
					{
						this._IDRelease = default(int);
					}
					this.SendPropertyChanged("Release");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phase_ReleasePhaseRef", Storage="_Phase", ThisKey="IDPhase", OtherKey="IDPhase", IsForeignKey=true)]
		public Phase Phase
		{
			get
			{
				return this._Phase.Entity;
			}
			set
			{
				Phase previousValue = this._Phase.Entity;
				if (((previousValue != value) 
							|| (this._Phase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phase.Entity = null;
						previousValue.ReleasePhaseRefs.Remove(this);
					}
					this._Phase.Entity = value;
					if ((value != null))
					{
						value.ReleasePhaseRefs.Add(this);
						this._IDPhase = value.IDPhase;
					}
					else
					{
						this._IDPhase = default(int);
					}
					this.SendPropertyChanged("Phase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Review")]
	public partial class Review : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDreview;
		
		private int _IDWorkItem;
		
		private int _IDReviewType;
		
		private int _IDRelease;
		
		private int _IDPhase;
		
		private System.Nullable<System.DateTime> _DateReview;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDreviewChanging(int value);
    partial void OnIDreviewChanged();
    partial void OnIDWorkItemChanging(int value);
    partial void OnIDWorkItemChanged();
    partial void OnIDReviewTypeChanging(int value);
    partial void OnIDReviewTypeChanged();
    partial void OnIDReleaseChanging(int value);
    partial void OnIDReleaseChanged();
    partial void OnIDPhaseChanging(int value);
    partial void OnIDPhaseChanged();
    partial void OnDateReviewChanging(System.Nullable<System.DateTime> value);
    partial void OnDateReviewChanged();
    #endregion
		
		public Review()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDreview", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDreview
		{
			get
			{
				return this._IDreview;
			}
			set
			{
				if ((this._IDreview != value))
				{
					this.OnIDreviewChanging(value);
					this.SendPropertyChanging();
					this._IDreview = value;
					this.SendPropertyChanged("IDreview");
					this.OnIDreviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDWorkItem", DbType="Int NOT NULL")]
		public int IDWorkItem
		{
			get
			{
				return this._IDWorkItem;
			}
			set
			{
				if ((this._IDWorkItem != value))
				{
					this.OnIDWorkItemChanging(value);
					this.SendPropertyChanging();
					this._IDWorkItem = value;
					this.SendPropertyChanged("IDWorkItem");
					this.OnIDWorkItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDReviewType", DbType="Int NOT NULL")]
		public int IDReviewType
		{
			get
			{
				return this._IDReviewType;
			}
			set
			{
				if ((this._IDReviewType != value))
				{
					this.OnIDReviewTypeChanging(value);
					this.SendPropertyChanging();
					this._IDReviewType = value;
					this.SendPropertyChanged("IDReviewType");
					this.OnIDReviewTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRelease", DbType="Int NOT NULL")]
		public int IDRelease
		{
			get
			{
				return this._IDRelease;
			}
			set
			{
				if ((this._IDRelease != value))
				{
					this.OnIDReleaseChanging(value);
					this.SendPropertyChanging();
					this._IDRelease = value;
					this.SendPropertyChanged("IDRelease");
					this.OnIDReleaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPhase", DbType="Int NOT NULL")]
		public int IDPhase
		{
			get
			{
				return this._IDPhase;
			}
			set
			{
				if ((this._IDPhase != value))
				{
					this.OnIDPhaseChanging(value);
					this.SendPropertyChanging();
					this._IDPhase = value;
					this.SendPropertyChanged("IDPhase");
					this.OnIDPhaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateReview", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateReview
		{
			get
			{
				return this._DateReview;
			}
			set
			{
				if ((this._DateReview != value))
				{
					this.OnDateReviewChanging(value);
					this.SendPropertyChanging();
					this._DateReview = value;
					this.SendPropertyChanged("DateReview");
					this.OnDateReviewChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReviewType")]
	public partial class ReviewType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDReviewType;
		
		private string _DescriptionRt;
		
		private bool _ActiveFlag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDReviewTypeChanging(int value);
    partial void OnIDReviewTypeChanged();
    partial void OnDescriptionRtChanging(string value);
    partial void OnDescriptionRtChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    #endregion
		
		public ReviewType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDReviewType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDReviewType
		{
			get
			{
				return this._IDReviewType;
			}
			set
			{
				if ((this._IDReviewType != value))
				{
					this.OnIDReviewTypeChanging(value);
					this.SendPropertyChanging();
					this._IDReviewType = value;
					this.SendPropertyChanged("IDReviewType");
					this.OnIDReviewTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionRt", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string DescriptionRt
		{
			get
			{
				return this._DescriptionRt;
			}
			set
			{
				if ((this._DescriptionRt != value))
				{
					this.OnDescriptionRtChanging(value);
					this.SendPropertyChanging();
					this._DescriptionRt = value;
					this.SendPropertyChanged("DescriptionRt");
					this.OnDescriptionRtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProjectRef")]
	public partial class UserProjectRef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDUser;
		
		private int _IDProject;
		
		private int _IDUserType;
		
		private bool _ActiveFlag;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Usert> _Usert;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDUserChanging(int value);
    partial void OnIDUserChanged();
    partial void OnIDProjectChanging(int value);
    partial void OnIDProjectChanged();
    partial void OnIDUserTypeChanging(int value);
    partial void OnIDUserTypeChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    #endregion
		
		public UserProjectRef()
		{
			this._Project = default(EntityRef<Project>);
			this._Usert = default(EntityRef<Usert>);
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDUser
		{
			get
			{
				return this._IDUser;
			}
			set
			{
				if ((this._IDUser != value))
				{
					if (this._Usert.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUserChanging(value);
					this.SendPropertyChanging();
					this._IDUser = value;
					this.SendPropertyChanged("IDUser");
					this.OnIDUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProject", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDProject
		{
			get
			{
				return this._IDProject;
			}
			set
			{
				if ((this._IDProject != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDProjectChanging(value);
					this.SendPropertyChanging();
					this._IDProject = value;
					this.SendPropertyChanged("IDProject");
					this.OnIDProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUserType", DbType="Int NOT NULL")]
		public int IDUserType
		{
			get
			{
				return this._IDUserType;
			}
			set
			{
				if ((this._IDUserType != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUserTypeChanging(value);
					this.SendPropertyChanging();
					this._IDUserType = value;
					this.SendPropertyChanged("IDUserType");
					this.OnIDUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_UserProjectRef", Storage="_Project", ThisKey="IDProject", OtherKey="IDProject", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.UserProjectRefs.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.UserProjectRefs.Add(this);
						this._IDProject = value.IDProject;
					}
					else
					{
						this._IDProject = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usert_UserProjectRef", Storage="_Usert", ThisKey="IDUser", OtherKey="IDUser", IsForeignKey=true)]
		public Usert Usert
		{
			get
			{
				return this._Usert.Entity;
			}
			set
			{
				Usert previousValue = this._Usert.Entity;
				if (((previousValue != value) 
							|| (this._Usert.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usert.Entity = null;
						previousValue.UserProjectRefs.Remove(this);
					}
					this._Usert.Entity = value;
					if ((value != null))
					{
						value.UserProjectRefs.Add(this);
						this._IDUser = value.IDUser;
					}
					else
					{
						this._IDUser = default(int);
					}
					this.SendPropertyChanged("Usert");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_UserProjectRef", Storage="_UserType", ThisKey="IDUserType", OtherKey="IDUserType", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.UserProjectRefs.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.UserProjectRefs.Add(this);
						this._IDUserType = value.IDUserType;
					}
					else
					{
						this._IDUserType = default(int);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Usert")]
	public partial class Usert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDUser;
		
		private string _UserName;
		
		private bool _SuperUserFlag;
		
		private bool _ActiveFlag;
		
		private string _UserEmail;
		
		private EntitySet<UserProjectRef> _UserProjectRefs;
		
		private EntitySet<WorkItem> _WorkItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDUserChanging(int value);
    partial void OnIDUserChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnSuperUserFlagChanging(bool value);
    partial void OnSuperUserFlagChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    #endregion
		
		public Usert()
		{
			this._UserProjectRefs = new EntitySet<UserProjectRef>(new Action<UserProjectRef>(this.attach_UserProjectRefs), new Action<UserProjectRef>(this.detach_UserProjectRefs));
			this._WorkItems = new EntitySet<WorkItem>(new Action<WorkItem>(this.attach_WorkItems), new Action<WorkItem>(this.detach_WorkItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDUser
		{
			get
			{
				return this._IDUser;
			}
			set
			{
				if ((this._IDUser != value))
				{
					this.OnIDUserChanging(value);
					this.SendPropertyChanging();
					this._IDUser = value;
					this.SendPropertyChanged("IDUser");
					this.OnIDUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuperUserFlag", DbType="Bit NOT NULL")]
		public bool SuperUserFlag
		{
			get
			{
				return this._SuperUserFlag;
			}
			set
			{
				if ((this._SuperUserFlag != value))
				{
					this.OnSuperUserFlagChanging(value);
					this.SendPropertyChanging();
					this._SuperUserFlag = value;
					this.SendPropertyChanged("SuperUserFlag");
					this.OnSuperUserFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="VarChar(150)")]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usert_UserProjectRef", Storage="_UserProjectRefs", ThisKey="IDUser", OtherKey="IDUser")]
		public EntitySet<UserProjectRef> UserProjectRefs
		{
			get
			{
				return this._UserProjectRefs;
			}
			set
			{
				this._UserProjectRefs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usert_WorkItem", Storage="_WorkItems", ThisKey="IDUser", OtherKey="IDUserAuthor")]
		public EntitySet<WorkItem> WorkItems
		{
			get
			{
				return this._WorkItems;
			}
			set
			{
				this._WorkItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProjectRefs(UserProjectRef entity)
		{
			this.SendPropertyChanging();
			entity.Usert = this;
		}
		
		private void detach_UserProjectRefs(UserProjectRef entity)
		{
			this.SendPropertyChanging();
			entity.Usert = null;
		}
		
		private void attach_WorkItems(WorkItem entity)
		{
			this.SendPropertyChanging();
			entity.Usert = this;
		}
		
		private void detach_WorkItems(WorkItem entity)
		{
			this.SendPropertyChanging();
			entity.Usert = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserType")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDUserType;
		
		private string _DescriptionUt;
		
		private bool _ActiveFlag;
		
		private EntitySet<UserProjectRef> _UserProjectRefs;
		
		private EntitySet<UserTypePrivilegeRef> _UserTypePrivilegeRefs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDUserTypeChanging(int value);
    partial void OnIDUserTypeChanged();
    partial void OnDescriptionUtChanging(string value);
    partial void OnDescriptionUtChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    #endregion
		
		public UserType()
		{
			this._UserProjectRefs = new EntitySet<UserProjectRef>(new Action<UserProjectRef>(this.attach_UserProjectRefs), new Action<UserProjectRef>(this.detach_UserProjectRefs));
			this._UserTypePrivilegeRefs = new EntitySet<UserTypePrivilegeRef>(new Action<UserTypePrivilegeRef>(this.attach_UserTypePrivilegeRefs), new Action<UserTypePrivilegeRef>(this.detach_UserTypePrivilegeRefs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUserType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDUserType
		{
			get
			{
				return this._IDUserType;
			}
			set
			{
				if ((this._IDUserType != value))
				{
					this.OnIDUserTypeChanging(value);
					this.SendPropertyChanging();
					this._IDUserType = value;
					this.SendPropertyChanged("IDUserType");
					this.OnIDUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionUt", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string DescriptionUt
		{
			get
			{
				return this._DescriptionUt;
			}
			set
			{
				if ((this._DescriptionUt != value))
				{
					this.OnDescriptionUtChanging(value);
					this.SendPropertyChanging();
					this._DescriptionUt = value;
					this.SendPropertyChanged("DescriptionUt");
					this.OnDescriptionUtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_UserProjectRef", Storage="_UserProjectRefs", ThisKey="IDUserType", OtherKey="IDUserType")]
		public EntitySet<UserProjectRef> UserProjectRefs
		{
			get
			{
				return this._UserProjectRefs;
			}
			set
			{
				this._UserProjectRefs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_UserTypePrivilegeRef", Storage="_UserTypePrivilegeRefs", ThisKey="IDUserType", OtherKey="IDUserType")]
		public EntitySet<UserTypePrivilegeRef> UserTypePrivilegeRefs
		{
			get
			{
				return this._UserTypePrivilegeRefs;
			}
			set
			{
				this._UserTypePrivilegeRefs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProjectRefs(UserProjectRef entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_UserProjectRefs(UserProjectRef entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
		
		private void attach_UserTypePrivilegeRefs(UserTypePrivilegeRef entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_UserTypePrivilegeRefs(UserTypePrivilegeRef entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTypePrivilegeRef")]
	public partial class UserTypePrivilegeRef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDUserType;
		
		private int _IDPrivilege;
		
		private EntityRef<UserType> _UserType;
		
		private EntityRef<Privilege> _Privilege;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDUserTypeChanging(int value);
    partial void OnIDUserTypeChanged();
    partial void OnIDPrivilegeChanging(int value);
    partial void OnIDPrivilegeChanged();
    #endregion
		
		public UserTypePrivilegeRef()
		{
			this._UserType = default(EntityRef<UserType>);
			this._Privilege = default(EntityRef<Privilege>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUserType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDUserType
		{
			get
			{
				return this._IDUserType;
			}
			set
			{
				if ((this._IDUserType != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUserTypeChanging(value);
					this.SendPropertyChanging();
					this._IDUserType = value;
					this.SendPropertyChanged("IDUserType");
					this.OnIDUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPrivilege", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDPrivilege
		{
			get
			{
				return this._IDPrivilege;
			}
			set
			{
				if ((this._IDPrivilege != value))
				{
					if (this._Privilege.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPrivilegeChanging(value);
					this.SendPropertyChanging();
					this._IDPrivilege = value;
					this.SendPropertyChanged("IDPrivilege");
					this.OnIDPrivilegeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_UserTypePrivilegeRef", Storage="_UserType", ThisKey="IDUserType", OtherKey="IDUserType", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.UserTypePrivilegeRefs.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.UserTypePrivilegeRefs.Add(this);
						this._IDUserType = value.IDUserType;
					}
					else
					{
						this._IDUserType = default(int);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Privilege_UserTypePrivilegeRef", Storage="_Privilege", ThisKey="IDPrivilege", OtherKey="IDPrivilege", IsForeignKey=true)]
		public Privilege Privilege
		{
			get
			{
				return this._Privilege.Entity;
			}
			set
			{
				Privilege previousValue = this._Privilege.Entity;
				if (((previousValue != value) 
							|| (this._Privilege.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Privilege.Entity = null;
						previousValue.UserTypePrivilegeRefs.Remove(this);
					}
					this._Privilege.Entity = value;
					if ((value != null))
					{
						value.UserTypePrivilegeRefs.Add(this);
						this._IDPrivilege = value.IDPrivilege;
					}
					else
					{
						this._IDPrivilege = default(int);
					}
					this.SendPropertyChanged("Privilege");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkItem")]
	public partial class WorkItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDWorkItem;
		
		private int _IDRelease;
		
		private int _IDPhase;
		
		private int _IDUserAuthor;
		
		private string _WorkItemName;
		
		private bool _ActiveFlag;
		
		private EntityRef<Release> _Release;
		
		private EntityRef<Usert> _Usert;
		
		private EntityRef<Phase> _Phase;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDWorkItemChanging(int value);
    partial void OnIDWorkItemChanged();
    partial void OnIDReleaseChanging(int value);
    partial void OnIDReleaseChanged();
    partial void OnIDPhaseChanging(int value);
    partial void OnIDPhaseChanged();
    partial void OnIDUserAuthorChanging(int value);
    partial void OnIDUserAuthorChanged();
    partial void OnWorkItemNameChanging(string value);
    partial void OnWorkItemNameChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    #endregion
		
		public WorkItem()
		{
			this._Release = default(EntityRef<Release>);
			this._Usert = default(EntityRef<Usert>);
			this._Phase = default(EntityRef<Phase>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDWorkItem", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDWorkItem
		{
			get
			{
				return this._IDWorkItem;
			}
			set
			{
				if ((this._IDWorkItem != value))
				{
					this.OnIDWorkItemChanging(value);
					this.SendPropertyChanging();
					this._IDWorkItem = value;
					this.SendPropertyChanged("IDWorkItem");
					this.OnIDWorkItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRelease", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDRelease
		{
			get
			{
				return this._IDRelease;
			}
			set
			{
				if ((this._IDRelease != value))
				{
					if (this._Release.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDReleaseChanging(value);
					this.SendPropertyChanging();
					this._IDRelease = value;
					this.SendPropertyChanged("IDRelease");
					this.OnIDReleaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPhase", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDPhase
		{
			get
			{
				return this._IDPhase;
			}
			set
			{
				if ((this._IDPhase != value))
				{
					if (this._Phase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPhaseChanging(value);
					this.SendPropertyChanging();
					this._IDPhase = value;
					this.SendPropertyChanged("IDPhase");
					this.OnIDPhaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUserAuthor", DbType="Int NOT NULL")]
		public int IDUserAuthor
		{
			get
			{
				return this._IDUserAuthor;
			}
			set
			{
				if ((this._IDUserAuthor != value))
				{
					if (this._Usert.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUserAuthorChanging(value);
					this.SendPropertyChanging();
					this._IDUserAuthor = value;
					this.SendPropertyChanged("IDUserAuthor");
					this.OnIDUserAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkItemName", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
		public string WorkItemName
		{
			get
			{
				return this._WorkItemName;
			}
			set
			{
				if ((this._WorkItemName != value))
				{
					this.OnWorkItemNameChanging(value);
					this.SendPropertyChanging();
					this._WorkItemName = value;
					this.SendPropertyChanged("WorkItemName");
					this.OnWorkItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Release_WorkItem", Storage="_Release", ThisKey="IDRelease", OtherKey="IDRelease", IsForeignKey=true)]
		public Release Release
		{
			get
			{
				return this._Release.Entity;
			}
			set
			{
				Release previousValue = this._Release.Entity;
				if (((previousValue != value) 
							|| (this._Release.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Release.Entity = null;
						previousValue.WorkItems.Remove(this);
					}
					this._Release.Entity = value;
					if ((value != null))
					{
						value.WorkItems.Add(this);
						this._IDRelease = value.IDRelease;
					}
					else
					{
						this._IDRelease = default(int);
					}
					this.SendPropertyChanged("Release");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usert_WorkItem", Storage="_Usert", ThisKey="IDUserAuthor", OtherKey="IDUser", IsForeignKey=true)]
		public Usert Usert
		{
			get
			{
				return this._Usert.Entity;
			}
			set
			{
				Usert previousValue = this._Usert.Entity;
				if (((previousValue != value) 
							|| (this._Usert.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usert.Entity = null;
						previousValue.WorkItems.Remove(this);
					}
					this._Usert.Entity = value;
					if ((value != null))
					{
						value.WorkItems.Add(this);
						this._IDUserAuthor = value.IDUser;
					}
					else
					{
						this._IDUserAuthor = default(int);
					}
					this.SendPropertyChanged("Usert");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phase_WorkItem", Storage="_Phase", ThisKey="IDPhase", OtherKey="IDPhase", IsForeignKey=true)]
		public Phase Phase
		{
			get
			{
				return this._Phase.Entity;
			}
			set
			{
				Phase previousValue = this._Phase.Entity;
				if (((previousValue != value) 
							|| (this._Phase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Phase.Entity = null;
						previousValue.WorkItems.Remove(this);
					}
					this._Phase.Entity = value;
					if ((value != null))
					{
						value.WorkItems.Add(this);
						this._IDPhase = value.IDPhase;
					}
					else
					{
						this._IDPhase = default(int);
					}
					this.SendPropertyChanged("Phase");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phase")]
	public partial class Phase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPhase;
		
		private string _PhaseName;
		
		private bool _ActiveFlag;
		
		private EntitySet<ReleasePhaseRef> _ReleasePhaseRefs;
		
		private EntitySet<WorkItem> _WorkItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPhaseChanging(int value);
    partial void OnIDPhaseChanged();
    partial void OnPhaseNameChanging(string value);
    partial void OnPhaseNameChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    #endregion
		
		public Phase()
		{
			this._ReleasePhaseRefs = new EntitySet<ReleasePhaseRef>(new Action<ReleasePhaseRef>(this.attach_ReleasePhaseRefs), new Action<ReleasePhaseRef>(this.detach_ReleasePhaseRefs));
			this._WorkItems = new EntitySet<WorkItem>(new Action<WorkItem>(this.attach_WorkItems), new Action<WorkItem>(this.detach_WorkItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPhase", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDPhase
		{
			get
			{
				return this._IDPhase;
			}
			set
			{
				if ((this._IDPhase != value))
				{
					this.OnIDPhaseChanging(value);
					this.SendPropertyChanging();
					this._IDPhase = value;
					this.SendPropertyChanged("IDPhase");
					this.OnIDPhaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhaseName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PhaseName
		{
			get
			{
				return this._PhaseName;
			}
			set
			{
				if ((this._PhaseName != value))
				{
					this.OnPhaseNameChanging(value);
					this.SendPropertyChanging();
					this._PhaseName = value;
					this.SendPropertyChanged("PhaseName");
					this.OnPhaseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phase_ReleasePhaseRef", Storage="_ReleasePhaseRefs", ThisKey="IDPhase", OtherKey="IDPhase")]
		public EntitySet<ReleasePhaseRef> ReleasePhaseRefs
		{
			get
			{
				return this._ReleasePhaseRefs;
			}
			set
			{
				this._ReleasePhaseRefs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Phase_WorkItem", Storage="_WorkItems", ThisKey="IDPhase", OtherKey="IDPhase")]
		public EntitySet<WorkItem> WorkItems
		{
			get
			{
				return this._WorkItems;
			}
			set
			{
				this._WorkItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReleasePhaseRefs(ReleasePhaseRef entity)
		{
			this.SendPropertyChanging();
			entity.Phase = this;
		}
		
		private void detach_ReleasePhaseRefs(ReleasePhaseRef entity)
		{
			this.SendPropertyChanging();
			entity.Phase = null;
		}
		
		private void attach_WorkItems(WorkItem entity)
		{
			this.SendPropertyChanging();
			entity.Phase = this;
		}
		
		private void detach_WorkItems(WorkItem entity)
		{
			this.SendPropertyChanging();
			entity.Phase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Privilege")]
	public partial class Privilege : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPrivilege;
		
		private string _DescriptionP;
		
		private bool _ActiveFlag;
		
		private EntitySet<UserTypePrivilegeRef> _UserTypePrivilegeRefs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPrivilegeChanging(int value);
    partial void OnIDPrivilegeChanged();
    partial void OnDescriptionPChanging(string value);
    partial void OnDescriptionPChanged();
    partial void OnActiveFlagChanging(bool value);
    partial void OnActiveFlagChanged();
    #endregion
		
		public Privilege()
		{
			this._UserTypePrivilegeRefs = new EntitySet<UserTypePrivilegeRef>(new Action<UserTypePrivilegeRef>(this.attach_UserTypePrivilegeRefs), new Action<UserTypePrivilegeRef>(this.detach_UserTypePrivilegeRefs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPrivilege", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDPrivilege
		{
			get
			{
				return this._IDPrivilege;
			}
			set
			{
				if ((this._IDPrivilege != value))
				{
					this.OnIDPrivilegeChanging(value);
					this.SendPropertyChanging();
					this._IDPrivilege = value;
					this.SendPropertyChanged("IDPrivilege");
					this.OnIDPrivilegeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionP", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string DescriptionP
		{
			get
			{
				return this._DescriptionP;
			}
			set
			{
				if ((this._DescriptionP != value))
				{
					this.OnDescriptionPChanging(value);
					this.SendPropertyChanging();
					this._DescriptionP = value;
					this.SendPropertyChanged("DescriptionP");
					this.OnDescriptionPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFlag", DbType="Bit NOT NULL")]
		public bool ActiveFlag
		{
			get
			{
				return this._ActiveFlag;
			}
			set
			{
				if ((this._ActiveFlag != value))
				{
					this.OnActiveFlagChanging(value);
					this.SendPropertyChanging();
					this._ActiveFlag = value;
					this.SendPropertyChanged("ActiveFlag");
					this.OnActiveFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Privilege_UserTypePrivilegeRef", Storage="_UserTypePrivilegeRefs", ThisKey="IDPrivilege", OtherKey="IDPrivilege")]
		public EntitySet<UserTypePrivilegeRef> UserTypePrivilegeRefs
		{
			get
			{
				return this._UserTypePrivilegeRefs;
			}
			set
			{
				this._UserTypePrivilegeRefs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTypePrivilegeRefs(UserTypePrivilegeRef entity)
		{
			this.SendPropertyChanging();
			entity.Privilege = this;
		}
		
		private void detach_UserTypePrivilegeRefs(UserTypePrivilegeRef entity)
		{
			this.SendPropertyChanging();
			entity.Privilege = null;
		}
	}
}
#pragma warning restore 1591
